buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name "BrassGoggledCoders maven"
        url "https://maven.brassgoggledcoders.xyz"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

version = "${minecraft_version}-${opentransport_version}." + System.getenv("bamboo_buildNumber")

group= "xyz.brassgoggledcoders.opentransport"
archivesBaseName = "OpenTransport"

minecraft {
    version = "${minecraft_version}-${forge_version}-${minecraft_version}"

    mappings = "${mappings_version}"
    runDir = "run/"
    useDepAts = true

    replace "@VERSION@", project.version
    replaceIn "OpenTransport.java"
}

dependencies {
    compile "xyz.brassgoggledcoders.boilerplate:Boilerplate:${minecraft_version}-${boilerplate_version}:deobf"
}

task getLibraries {
    def libsFolder = new File('libs')
    if (!libsFolder.isDirectory()) {
        libsFolder.mkdirs()
    }

    def downloads = new ArrayList<Tuple>();

    def ironchest = 'ironchest-' + minecraft_version + '-' + ironchest_version + '.jar'
    def ironchestSource = 'http://minecraft.curseforge.com/projects/iron-chests/files/2306186/download'

    downloads.add(new Tuple(ironchest, ironchestSource))

    libsFolder.listFiles().each { file ->
        def isInDownloadList = false;
        downloads.each {download ->
            if(file.name.equals(download.get(0).toString())) {
                isInDownloadList = true;
            }
        }
        if(!isInDownloadList || file.size() < 5) {
            println "Deleting file " + file.name
            file.delete();
        }
    }

    downloads.each{download ->
        def fileLocation = new File('libs', download.get(0).toString())
        if(!fileLocation.exists())  {
            def downloadString = download.get(1).toString()
            if(downloadString.contains(" ")) {
                downloadString = downloadString.replace(" ", "%20");
            }
            println "Downloading " + download.get(0).toString()
            fileLocation.withOutputStream { out ->
                new URL(downloadString).withInputStream { from ->
                    out << from;
                }
            }
        }
    }
}


compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    classifier = ""
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output) {
        classifier = "deobf"
    }
}

artifacts {
    archives deobfJar
}

idea {
    module {
        inheritOutputDirs = true
    }
}

task("uploadJars", dependsOn: "reobf") {
    description = "uploads JARs"
    if (System.getenv("bamboo_local_maven") != null) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://" + System.getenv("bamboo_local_maven"))
                    pom {
                        groupId = project.group
                        version = project.version
                        artifactId = project.archivesBaseName
                        project {
                            name project.archivesBaseName
                            packaging 'jar'
                            description project.archivesBaseName
                            url ''
                            scm {
                                url 'https://github.com/BrassGoggledCoders/OpenTransport'
                                connection 'scm:git:git@github.com:BrassGoggledCoders/OpenTransport.git'
                                developerConnection 'scm:git:git@github.com:BrassGoggledCoders/OpenTransport.git'
                            }
                            issueManagement {
                                system 'github'
                                url 'https://github.com/BrassGoggledCoders/OpenTransport/issues'
                            }
                            licenses {
                                license {
                                    name 'MIT'
                                    url 'https://github.com/BrassGoggledCoders/OpenTransport/blob/master/LICENSE'
                                    distribution 'repo'
                                }
                            }
                            developers {
                                developer {
                                    id 'SkySom'
                                    name 'SkySom'
                                    roles { role 'developer' }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
